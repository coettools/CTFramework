{"version":3,"file":"index.js","mappings":"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","sources":["webpack://CTFramework/webpack/universalModuleDefinition","webpack://CTFramework/./src/CTFramework.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CTFramework\"] = factory();\n\telse\n\t\troot[\"CTFramework\"] = factory();\n})(this, () => {\nreturn ","export function createElement(tag, props, ...children) {\n    props = props || {};\n    return {\n        tag,\n        props: Object.assign({}, props),\n        children: children.flat(),\n        key: (props === null || props === void 0 ? void 0 : props.key) || null,\n    };\n}\nexport function Fragment(props) {\n    return props.children || [];\n}\nexport class CTFramework {\n    // Render a component into a DOM container.\n    static render(component, container) {\n        const vnode = component.render(); // Generate the initial virtual node from the component's render method.\n        vnode.component = component;\n        component.vnode = vnode;\n        const dom = CTFramework.createDom(vnode); // Create the actual DOM element from the virtual node.\n        container.appendChild(dom); // Attach it to the container.\n        CTFramework.onMount(vnode); // Trigger the component's mount lifecycle.\n    }\n    // Schedule updates to be processed in the next animation frame for better performance.\n    static scheduleUpdate(updateFn) {\n        CTFramework.pendingUpdates.push(updateFn);\n        if (CTFramework.pendingUpdates.length === 1) {\n            requestAnimationFrame(CTFramework.processUpdates);\n        }\n    }\n    // Process all pending updates from the queue.\n    static processUpdates() {\n        while (CTFramework.pendingUpdates.length) {\n            const updateFn = CTFramework.pendingUpdates.shift();\n            updateFn && updateFn();\n        }\n    }\n    // Re-render a component and update the DOM only if necessary.\n    static rerender(component) {\n        var _a, _b;\n        if (!component.vnode)\n            return;\n        const oldVNode = component.vnode;\n        if (!component.shouldComponentUpdate(component.props, component.state)) {\n            return; // Skip re-render if shouldComponentUpdate returns false.\n        }\n        const newVNode = component.render(); // Render the updated virtual node.\n        newVNode.component = component;\n        const updatedDom = CTFramework.updateDom(oldVNode, newVNode); // Update the DOM.\n        // Replace the DOM node if necessary.\n        if (typeof oldVNode !== \"string\" && updatedDom !== oldVNode.dom && oldVNode.dom) {\n            (_b = (_a = oldVNode.dom) === null || _a === void 0 ? void 0 : _a.parentNode) === null || _b === void 0 ? void 0 : _b.replaceChild(updatedDom, oldVNode.dom);\n        }\n        component.vnode = newVNode; // Store the new virtual node in the component.\n        component.componentOnUpdate(component.props, component.state); // Trigger the update lifecycle.\n    }\n    // Create a DOM node from a virtual node.\n    static createDom(vnode) {\n        if (typeof vnode === \"string\" || typeof vnode === \"number\") {\n            return document.createTextNode(String(vnode)); // Convert numbers to text nodes as well.\n        }\n        if (typeof vnode.tag === \"function\") {\n            // Handle functional or class-based components.\n            const ComponentClass = vnode.tag;\n            const component = new ComponentClass(vnode.props);\n            const componentVNode = component.render();\n            componentVNode.component = component;\n            vnode.component = component;\n            component.vnode = componentVNode;\n            const dom = CTFramework.createDom(componentVNode);\n            vnode.dom = dom;\n            component.componentOnMount();\n            return dom;\n        }\n        const element = document.createElement(vnode.tag); // Create a DOM element for the tag.\n        vnode.dom = element;\n        // Event delegation: Attach a click-event attribute and store the event handler.\n        // Check if the vnode has an onClick prop before adding the event handler\n        if (vnode.props && vnode.props.onClick) {\n            const oldEventId = element.getAttribute(\"click-event\");\n            if (oldEventId && CTFramework.eventHandlers[oldEventId]) {\n                delete CTFramework.eventHandlers[oldEventId]; // Remove the old handler\n            }\n            // Only add the event listener and ID if the component has a click event\n            element.setAttribute(\"click-event\", guid());\n            CTFramework.eventHandlers[element.getAttribute(\"click-event\")] = vnode.props.onClick;\n        }\n        // Set properties and styles.\n        CTFramework.updateDomProperties(element, {}, vnode.props);\n        // Recursively create DOM for child nodes.\n        if (vnode.children && vnode.children.length > 0) {\n            vnode.children.forEach((child) => {\n                const childDom = CTFramework.createDom(child);\n                element.appendChild(childDom);\n            });\n        }\n        return element;\n    }\n    // Update the DOM by comparing the old and new virtual nodes.\n    static updateDom(oldVNode, newVNode) {\n        // Handle text nodes\n        if (typeof oldVNode === \"string\" || typeof newVNode === \"string\") {\n            const newTextContent = (typeof newVNode === \"string\" ? newVNode : \"\") || \"\";\n            if (oldVNode !== newTextContent) {\n                return document.createTextNode(newTextContent);\n            }\n            return typeof oldVNode === \"string\" ? document.createTextNode(oldVNode) : oldVNode.dom;\n        }\n        // Static node check remains\n        if (oldVNode.isStatic) {\n            newVNode.dom = oldVNode.dom;\n            newVNode.component = oldVNode.component;\n            return newVNode.dom;\n        }\n        // Replace node if tag is different\n        if (oldVNode.tag !== newVNode.tag) {\n            const newDom = CTFramework.createDom(newVNode);\n            if (oldVNode.dom && oldVNode.dom.parentNode) {\n                oldVNode.dom.parentNode.replaceChild(newDom, oldVNode.dom);\n            }\n            return newDom;\n        }\n        const dom = oldVNode.dom;\n        newVNode.dom = dom;\n        // **Ensure text content is updated**:\n        // If we're dealing with text inside an element (like <h1>)\n        if (newVNode.children.length === 1 && typeof newVNode.children[0] === \"string\") {\n            if (dom.textContent !== newVNode.children[0]) {\n                dom.textContent = newVNode.children[0]; // Update text directly\n            }\n        }\n        // Update properties even if children haven't changed\n        CTFramework.updateDomProperties(dom, oldVNode.props, newVNode.props);\n        // Handle children updates (only if they exist)\n        const oldChildren = oldVNode.children || [];\n        const newChildren = newVNode.children || [];\n        if (oldChildren.length === 0 && newChildren.length === 0) {\n            return CTFramework.createDom(newVNode);\n        }\n        const oldChildrenMap = new Map();\n        // Map old children by keys if any\n        oldChildren.forEach((child) => {\n            if (child && typeof child !== \"string\" && child.key) {\n                oldChildrenMap.set(child.key, child); // **Track children by key**\n            }\n        });\n        // **Iterate through new children**\n        newChildren.forEach((newChild, i) => {\n            if (typeof newChild === \"string\") {\n                const newTextContent = newChild || \"\";\n                const oldChild = oldChildren[i];\n                if (typeof oldChild === \"string\" && oldChild !== newTextContent) {\n                    // **Update text content if needed**\n                    dom.childNodes[i].textContent = newTextContent;\n                }\n                else if (dom.childNodes[i]) {\n                    dom.replaceChild(document.createTextNode(newTextContent), dom.childNodes[i]);\n                }\n                else {\n                    dom.appendChild(document.createTextNode(newTextContent));\n                }\n            }\n            else {\n                const key = newChild.key;\n                const oldChild = key ? oldChildrenMap.get(key) : oldChildren[i]; // **Look for matching old child by key or index**\n                if (oldChild) {\n                    // **Update the DOM for the matching child**\n                    const updatedChildDom = CTFramework.updateDom(oldChild, newChild);\n                    if (dom.childNodes[i] !== updatedChildDom) {\n                        dom.replaceChild(updatedChildDom, dom.childNodes[i]);\n                    }\n                    if (key)\n                        oldChildrenMap.delete(key); // **Remove key from map once updated**\n                }\n                else {\n                    // **If no matching old child, create a new DOM node**\n                    const newChildDom = CTFramework.createDom(newChild);\n                    dom.appendChild(newChildDom);\n                }\n            }\n        });\n        // **Remove old children that are no longer present**\n        oldChildrenMap.forEach((oldChild) => {\n            if (oldChild.dom && dom.contains(oldChild.dom)) {\n                dom.removeChild(oldChild.dom); // **Remove old DOM elements that are no longer in newVNode**\n            }\n        });\n        return dom;\n    }\n    // Update the properties and styles of a DOM element.\n    static updateDomProperties(dom, oldProps = {}, newProps = {}) {\n        var _a;\n        const changes = CTFramework.getPropChanges(oldProps, newProps);\n        // Check if click-event exists on the DOM element, otherwise create one\n        let eventId = (_a = dom.getAttribute(\"click-event\")) !== null && _a !== void 0 ? _a : \"\";\n        changes.forEach(({ name, value }) => {\n            if (name === \"style\") {\n                CTFramework.updateStyle(dom, oldProps.style, newProps.style);\n            }\n            else if (name.startsWith(\"on\")) {\n                const eventType = name.toLowerCase().substring(2);\n                // Remove the old event listener from CTFramework.eventHandlers using click-event\n                if (CTFramework.eventHandlers[eventId]) {\n                    delete CTFramework.eventHandlers[eventId]; // Remove from event handlers map\n                }\n                // Add the new event listener in CTFramework.eventHandlers using click-event\n                if (value && typeof value === \"function\") {\n                    CTFramework.eventHandlers[eventId] = value; // Update the event handler in the map\n                }\n            }\n            else if (name === \"textContent\") {\n                dom.textContent = value;\n            }\n            else if (name in dom) {\n                dom[name] = value;\n            }\n            else {\n                dom.setAttribute(name, value);\n            }\n        });\n    }\n    // Get the differences between the old and new props for efficient updates.\n    static getPropChanges(oldProps, newProps) {\n        const changes = [];\n        for (const name in newProps) {\n            if (newProps[name] !== oldProps[name]) {\n                changes.push({ name, value: newProps[name] });\n            }\n        }\n        return changes;\n    }\n    // Add the missing updateStyle function.\n    static updateStyle(dom, oldStyle = {}, newStyle = {}) {\n        // If styles are provided as a string, update the style attribute.\n        if (typeof oldStyle === \"string\" || typeof newStyle === \"string\") {\n            dom.setAttribute(\"style\", newStyle || \"\");\n        }\n        else {\n            // Remove old styles not present in the new styles.\n            Object.keys(oldStyle).forEach((key) => {\n                if (!(key in newStyle)) {\n                    dom.style[key] = \"\";\n                }\n            });\n            // Apply new styles.\n            Object.keys(newStyle).forEach((key) => {\n                if (oldStyle[key] !== newStyle[key]) {\n                    dom.style[key] = newStyle[key];\n                }\n            });\n        }\n    }\n    // Helper method to handle the component mount lifecycle.\n    static onMount(vnode) {\n        if (typeof vnode === \"string\")\n            return;\n        if (vnode.component) {\n            vnode.component.componentOnMount(); // Trigger component mount lifecycle.\n        }\n        vnode.children.forEach((child) => CTFramework.onMount(child));\n    }\n    // Helper method to handle the component unmount lifecycle.\n    static onUnmount(vnode) {\n        if (typeof vnode === \"string\")\n            return;\n        if (vnode.component) {\n            vnode.component.componentOnUnmount(); // Trigger component unmount lifecycle.\n        }\n        vnode.children.forEach((child) => CTFramework.onUnmount(child));\n    }\n}\nCTFramework.eventHandlers = {}; // Store event handlers by their unique event ID.\nCTFramework.pendingUpdates = []; // Queue for pending updates to be processed.\nfunction guid() {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16) | 0;\n        const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n}\n// Event delegation: A single event listener handles all click events.\ndocument.addEventListener(\"click\", (event) => {\n    let target = event.target;\n    while (target && !target.hasAttribute(\"click-event\")) {\n        target = target.parentElement;\n    }\n    if (target) {\n        const handler = CTFramework.eventHandlers[target.getAttribute(\"click-event\")];\n        handler && handler(event);\n    }\n});\n"],"names":["root","factory","exports","module","define","amd","this","render","component","container","vnode","dom","createDom","appendChild","onMount","scheduleUpdate","updateFn","pendingUpdates","push","length","requestAnimationFrame","processUpdates","shift","rerender","_a","_b","oldVNode","shouldComponentUpdate","props","state","newVNode","updatedDom","updateDom","parentNode","replaceChild","componentOnUpdate","document","createTextNode","String","tag","ComponentClass","componentVNode","componentOnMount","element","createElement","onClick","oldEventId","getAttribute","eventHandlers","setAttribute","replace","c","r","Math","random","toString","updateDomProperties","children","forEach","child","childDom","newTextContent","isStatic","newDom","textContent","oldChildren","newChildren","oldChildrenMap","Map","key","set","newChild","i","oldChild","childNodes","get","updatedChildDom","delete","newChildDom","contains","removeChild","oldProps","newProps","changes","getPropChanges","eventId","name","value","updateStyle","style","startsWith","toLowerCase","substring","oldStyle","newStyle","Object","keys","onUnmount","componentOnUnmount","addEventListener","event","target","hasAttribute","parentElement","handler"],"sourceRoot":""}