{"version":3,"file":"index.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;;;;;;;;ACVO;AACP;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA,0CAA0C;AAC1C;AACA;AACA,kDAAkD;AAClD,oCAAoC;AACpC,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,6CAA6C;AAC7C;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA,oCAAoC;AACpC,uEAAuE;AACvE;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,+CAA+C;AAC/C;AACA,SAAS;AACT;AACA;AACA;AACA,iDAAiD,eAAe;AAChE;AACA;AACA;AACA;AACA,2BAA2B,aAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6BAA6B;AAC5D;AACA;AACA;AACA;AACA;AACA,yCAAyC,eAAe;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA,gCAAgC;AAChC,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;ACjS2C;AAC5C;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA,gBAAgB,qDAAW;AAC3B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,8EAA8E,sBAAsB;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UCvDA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;ACNA;AAC8C;AACa;AACjB;AAC1C,iEAAe,qDAAW,EAAC","sources":["webpack://CTFramework/webpack/universalModuleDefinition","webpack://CTFramework/./src/CTFramework.ts","webpack://CTFramework/./src/Component.ts","webpack://CTFramework/webpack/bootstrap","webpack://CTFramework/webpack/runtime/define property getters","webpack://CTFramework/webpack/runtime/hasOwnProperty shorthand","webpack://CTFramework/webpack/runtime/make namespace object","webpack://CTFramework/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CTFramework\"] = factory();\n\telse\n\t\troot[\"CTFramework\"] = factory();\n})(this, () => {\nreturn ","export function createElement(tag, props, ...children) {\n    props = props || {};\n    return {\n        tag,\n        props: Object.assign({}, props),\n        children: children.flat(),\n        key: (props === null || props === void 0 ? void 0 : props.key) || null,\n    };\n}\nexport function Fragment(props) {\n    return props.children || [];\n}\nexport class CTFramework {\n    // Render a component into a DOM container.\n    static render(component, container) {\n        const vnode = component.render(); // Generate the initial virtual node from the component's render method.\n        vnode.component = component;\n        component.vnode = vnode;\n        const dom = CTFramework.createDom(vnode); // Create the actual DOM element from the virtual node.\n        container.appendChild(dom); // Attach it to the container.\n        CTFramework.onMount(vnode); // Trigger the component's mount lifecycle.\n    }\n    // Schedule updates to be processed in the next animation frame for better performance.\n    static scheduleUpdate(updateFn) {\n        CTFramework.pendingUpdates.push(updateFn);\n        if (CTFramework.pendingUpdates.length === 1) {\n            requestAnimationFrame(CTFramework.processUpdates);\n        }\n    }\n    // Process all pending updates from the queue.\n    static processUpdates() {\n        while (CTFramework.pendingUpdates.length) {\n            const updateFn = CTFramework.pendingUpdates.shift();\n            updateFn && updateFn();\n        }\n    }\n    // Re-render a component and update the DOM only if necessary.\n    static rerender(component) {\n        var _a, _b;\n        if (!component.vnode)\n            return;\n        const oldVNode = component.vnode;\n        if (!component.shouldComponentUpdate(component.props, component.state)) {\n            return; // Skip re-render if shouldComponentUpdate returns false.\n        }\n        const newVNode = component.render(); // Render the updated virtual node.\n        newVNode.component = component;\n        const updatedDom = CTFramework.updateDom(oldVNode, newVNode); // Update the DOM.\n        // Replace the DOM node if necessary.\n        if (typeof oldVNode !== \"string\" && updatedDom !== oldVNode.dom && oldVNode.dom) {\n            (_b = (_a = oldVNode.dom) === null || _a === void 0 ? void 0 : _a.parentNode) === null || _b === void 0 ? void 0 : _b.replaceChild(updatedDom, oldVNode.dom);\n        }\n        component.vnode = newVNode; // Store the new virtual node in the component.\n        component.componentOnUpdate(component.props, component.state); // Trigger the update lifecycle.\n    }\n    // Create a DOM node from a virtual node.\n    static createDom(vnode) {\n        if (typeof vnode === \"string\" || typeof vnode === \"number\") {\n            return document.createTextNode(String(vnode)); // Convert numbers to text nodes as well.\n        }\n        if (typeof vnode.tag === \"function\") {\n            // Handle functional or class-based components.\n            const ComponentClass = vnode.tag;\n            const component = new ComponentClass(vnode.props);\n            const componentVNode = component.render();\n            componentVNode.component = component;\n            vnode.component = component;\n            component.vnode = componentVNode;\n            const dom = CTFramework.createDom(componentVNode);\n            vnode.dom = dom;\n            component.componentOnMount();\n            return dom;\n        }\n        const element = document.createElement(vnode.tag); // Create a DOM element for the tag.\n        vnode.dom = element;\n        // Event delegation: Attach a click-event attribute and store the event handler.\n        // Check if the vnode has an onClick prop before adding the event handler\n        if (vnode.props && vnode.props.onClick) {\n            const oldEventId = element.getAttribute(\"click-event\");\n            if (oldEventId && CTFramework.eventHandlers[oldEventId]) {\n                delete CTFramework.eventHandlers[oldEventId]; // Remove the old handler\n            }\n            // Only add the event listener and ID if the component has a click event\n            element.setAttribute(\"click-event\", guid());\n            CTFramework.eventHandlers[element.getAttribute(\"click-event\")] = vnode.props.onClick;\n        }\n        // Set properties and styles.\n        CTFramework.updateDomProperties(element, {}, vnode.props);\n        // Recursively create DOM for child nodes.\n        if (vnode.children && vnode.children.length > 0) {\n            vnode.children.forEach((child) => {\n                const childDom = CTFramework.createDom(child);\n                element.appendChild(childDom);\n            });\n        }\n        return element;\n    }\n    // Update the DOM by comparing the old and new virtual nodes.\n    static updateDom(oldVNode, newVNode) {\n        // Handle text nodes\n        if (typeof oldVNode === \"string\" || typeof newVNode === \"string\") {\n            const newTextContent = (typeof newVNode === \"string\" ? newVNode : \"\") || \"\";\n            if (oldVNode !== newTextContent) {\n                return document.createTextNode(newTextContent);\n            }\n            return typeof oldVNode === \"string\" ? document.createTextNode(oldVNode) : oldVNode.dom;\n        }\n        // Static node check remains\n        if (oldVNode.isStatic) {\n            newVNode.dom = oldVNode.dom;\n            newVNode.component = oldVNode.component;\n            return newVNode.dom;\n        }\n        // Replace node if tag is different\n        if (oldVNode.tag !== newVNode.tag) {\n            const newDom = CTFramework.createDom(newVNode);\n            if (oldVNode.dom && oldVNode.dom.parentNode) {\n                oldVNode.dom.parentNode.replaceChild(newDom, oldVNode.dom);\n            }\n            return newDom;\n        }\n        const dom = oldVNode.dom;\n        newVNode.dom = dom;\n        // **Ensure text content is updated**:\n        // If we're dealing with text inside an element (like <h1>)\n        if (newVNode.children.length === 1 && typeof newVNode.children[0] === \"string\") {\n            if (dom.textContent !== newVNode.children[0]) {\n                dom.textContent = newVNode.children[0]; // Update text directly\n            }\n        }\n        // Update properties even if children haven't changed\n        CTFramework.updateDomProperties(dom, oldVNode.props, newVNode.props);\n        // Handle children updates (only if they exist)\n        const oldChildren = oldVNode.children || [];\n        const newChildren = newVNode.children || [];\n        if (oldChildren.length === 0 && newChildren.length === 0) {\n            return CTFramework.createDom(newVNode);\n        }\n        const oldChildrenMap = new Map();\n        // Map old children by keys if any\n        oldChildren.forEach((child) => {\n            if (child && typeof child !== \"string\" && child.key) {\n                oldChildrenMap.set(child.key, child); // **Track children by key**\n            }\n        });\n        // **Iterate through new children**\n        newChildren.forEach((newChild, i) => {\n            if (typeof newChild === \"string\") {\n                const newTextContent = newChild || \"\";\n                const oldChild = oldChildren[i];\n                if (typeof oldChild === \"string\" && oldChild !== newTextContent) {\n                    // **Update text content if needed**\n                    dom.childNodes[i].textContent = newTextContent;\n                }\n                else if (dom.childNodes[i]) {\n                    dom.replaceChild(document.createTextNode(newTextContent), dom.childNodes[i]);\n                }\n                else {\n                    dom.appendChild(document.createTextNode(newTextContent));\n                }\n            }\n            else {\n                const key = newChild.key;\n                const oldChild = key ? oldChildrenMap.get(key) : oldChildren[i]; // **Look for matching old child by key or index**\n                if (oldChild) {\n                    // **Update the DOM for the matching child**\n                    const updatedChildDom = CTFramework.updateDom(oldChild, newChild);\n                    if (dom.childNodes[i] !== updatedChildDom) {\n                        dom.replaceChild(updatedChildDom, dom.childNodes[i]);\n                    }\n                    if (key)\n                        oldChildrenMap.delete(key); // **Remove key from map once updated**\n                }\n                else {\n                    // **If no matching old child, create a new DOM node**\n                    const newChildDom = CTFramework.createDom(newChild);\n                    dom.appendChild(newChildDom);\n                }\n            }\n        });\n        // **Remove old children that are no longer present**\n        oldChildrenMap.forEach((oldChild) => {\n            if (oldChild.dom && dom.contains(oldChild.dom)) {\n                dom.removeChild(oldChild.dom); // **Remove old DOM elements that are no longer in newVNode**\n            }\n        });\n        return dom;\n    }\n    // Update the properties and styles of a DOM element.\n    static updateDomProperties(dom, oldProps = {}, newProps = {}) {\n        var _a;\n        const changes = CTFramework.getPropChanges(oldProps, newProps);\n        // Check if click-event exists on the DOM element, otherwise create one\n        let eventId = (_a = dom.getAttribute(\"click-event\")) !== null && _a !== void 0 ? _a : \"\";\n        changes.forEach(({ name, value }) => {\n            if (name === \"style\") {\n                CTFramework.updateStyle(dom, oldProps.style, newProps.style);\n            }\n            else if (name.startsWith(\"on\")) {\n                const eventType = name.toLowerCase().substring(2);\n                // Remove the old event listener from CTFramework.eventHandlers using click-event\n                if (CTFramework.eventHandlers[eventId]) {\n                    delete CTFramework.eventHandlers[eventId]; // Remove from event handlers map\n                }\n                // Add the new event listener in CTFramework.eventHandlers using click-event\n                if (value && typeof value === \"function\") {\n                    CTFramework.eventHandlers[eventId] = value; // Update the event handler in the map\n                }\n            }\n            else if (name === \"textContent\") {\n                dom.textContent = value;\n            }\n            else if (name in dom) {\n                dom[name] = value;\n            }\n            else {\n                dom.setAttribute(name, value);\n            }\n        });\n    }\n    // Get the differences between the old and new props for efficient updates.\n    static getPropChanges(oldProps, newProps) {\n        const changes = [];\n        for (const name in newProps) {\n            if (newProps[name] !== oldProps[name]) {\n                changes.push({ name, value: newProps[name] });\n            }\n        }\n        return changes;\n    }\n    // Add the missing updateStyle function.\n    static updateStyle(dom, oldStyle = {}, newStyle = {}) {\n        // If styles are provided as a string, update the style attribute.\n        if (typeof oldStyle === \"string\" || typeof newStyle === \"string\") {\n            dom.setAttribute(\"style\", newStyle || \"\");\n        }\n        else {\n            // Remove old styles not present in the new styles.\n            Object.keys(oldStyle).forEach((key) => {\n                if (!(key in newStyle)) {\n                    dom.style[key] = \"\";\n                }\n            });\n            // Apply new styles.\n            Object.keys(newStyle).forEach((key) => {\n                if (oldStyle[key] !== newStyle[key]) {\n                    dom.style[key] = newStyle[key];\n                }\n            });\n        }\n    }\n    // Helper method to handle the component mount lifecycle.\n    static onMount(vnode) {\n        if (typeof vnode === \"string\")\n            return;\n        if (vnode.component) {\n            vnode.component.componentOnMount(); // Trigger component mount lifecycle.\n        }\n        vnode.children.forEach((child) => CTFramework.onMount(child));\n    }\n    // Helper method to handle the component unmount lifecycle.\n    static onUnmount(vnode) {\n        if (typeof vnode === \"string\")\n            return;\n        if (vnode.component) {\n            vnode.component.componentOnUnmount(); // Trigger component unmount lifecycle.\n        }\n        vnode.children.forEach((child) => CTFramework.onUnmount(child));\n    }\n}\nCTFramework.eventHandlers = {}; // Store event handlers by their unique event ID.\nCTFramework.pendingUpdates = []; // Queue for pending updates to be processed.\nfunction guid() {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16) | 0;\n        const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n}\n// Event delegation: A single event listener handles all click events.\ndocument.addEventListener(\"click\", (event) => {\n    let target = event.target;\n    while (target && !target.hasAttribute(\"click-event\")) {\n        target = target.parentElement;\n    }\n    if (target) {\n        const handler = CTFramework.eventHandlers[target.getAttribute(\"click-event\")];\n        handler && handler(event);\n    }\n});\n","import { CTFramework } from \"./CTFramework\";\n// Component class representing a UI component with state and lifecycle management.\nexport class Component {\n    constructor(props) {\n        this.vnode = null;\n        this.props = props;\n        this.state = {};\n    }\n    // Set a new state and schedule a re-render if necessary.\n    setState(newState) {\n        const prevState = this.state;\n        this.state = Object.assign(Object.assign({}, this.state), newState);\n        // Schedule a re-render asynchronously.\n        Promise.resolve().then(() => {\n            if (this.vnode && this.shouldComponentUpdate(this.props, prevState)) {\n                // Use CTFramework's rerender method to update the DOM\n                CTFramework.rerender(this);\n            }\n        });\n    }\n    // Method to control whether a component should re-render.\n    // Override this method in individual components if specific checks are needed.\n    shouldComponentUpdate(nextProps, nextState) {\n        return true; // Default behavior is to always re-render.\n    }\n    // Render method must be implemented by any class extending Component.\n    render() {\n        throw new Error(`Render method must be implemented in the component ${this.constructor.name}`);\n    }\n    // Lifecycle methods, which can be overridden by components.\n    componentOnMount() { }\n    componentOnUpdate(prevProps, prevState) { }\n    componentOnUnmount() { }\n    componentOnCatch(error, info) { }\n}\n// Memoization helper function for components.\n// It prevents unnecessary re-renders by checking if the props have changed.\nexport function memo(ComponentClass) {\n    return class MemoizedComponent extends Component {\n        shouldComponentUpdate(nextProps) {\n            return shallowCompare(this.props, nextProps); // Use shallow comparison of props to prevent re-rendering.\n        }\n        // Forward the render method from the original component class\n        render() {\n            return new ComponentClass(this.props).render();\n        }\n    };\n}\n// A shallow comparison function to check if two objects are different.\nfunction shallowCompare(obj1, obj2) {\n    for (const key in obj1) {\n        if (obj1[key] !== obj2[key])\n            return true;\n    }\n    return false;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/// <reference path=\"./jsx.d.ts\" />\nimport { Component, memo } from \"./Component\";\nimport { createElement, CTFramework } from \"./CTFramework\";\nexport { Component, memo, createElement };\nexport default CTFramework;\n"],"names":[],"sourceRoot":""}