/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ var __webpack_modules__ = {
  /***/ "./src/CTFramework.ts":
    /*!****************************!*\
  !*** ./src/CTFramework.ts ***!
  \****************************/
    /***/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CTFramework: () => (/* binding */ CTFramework),\n/* harmony export */   createElement: () => (/* binding */ createElement)\n/* harmony export */ });\nfunction createElement(tag, props, ...children) {\r\n    props = props || {};\r\n        return {\r\n        tag,\r\n        props: Object.assign({}, props),\r\n        children: children.flat(),\r\n        key: (props === null || props === void 0 ? void 0 : props.key) || null,\r\n    };\r\n}\r\nclass CTFramework {\r\n    // Render a component into a DOM container.\r\n    static render(component, container) {\r\n        const vnode = component.render(); // Generate the initial virtual node from the component\'s render method.\r\n        vnode.component = component;\r\n        component.vnode = vnode;\r\n        const dom = CTFramework.createDom(vnode); // Create the actual DOM element from the virtual node.\r\n        container.appendChild(dom); // Attach it to the container.\r\n        CTFramework.onMount(vnode); // Trigger the component\'s mount lifecycle.\r\n    }\r\n    // Schedule updates to be processed in the next animation frame for better performance.\r\n    static scheduleUpdate(updateFn) {\r\n        CTFramework.pendingUpdates.push(updateFn);\r\n        if (CTFramework.pendingUpdates.length === 1) {\r\n            requestAnimationFrame(CTFramework.processUpdates);\r\n        }\r\n    }\r\n    // Process all pending updates from the queue.\r\n    static processUpdates() {\r\n        while (CTFramework.pendingUpdates.length) {\r\n            const updateFn = CTFramework.pendingUpdates.shift();\r\n            updateFn && updateFn();\r\n        }\r\n    }\r\n    // Re-render a component and update the DOM only if necessary.\r\n    static rerender(component) {\r\n        var _a, _b;\r\n        if (!component.vnode)\r\n            return;\r\n        const oldVNode = component.vnode;\r\n        if (!component.shouldComponentUpdate(component.props, component.state)) {\r\n            return; // Skip re-render if shouldComponentUpdate returns false.\r\n        }\r\n        const newVNode = component.render(); // Render the updated virtual node.\r\n        newVNode.component = component;\r\n        const updatedDom = CTFramework.updateDom(oldVNode, newVNode); // Update the DOM.\r\n        // Replace the DOM node if necessary.\r\n        if (typeof oldVNode !== "string" && updatedDom !== oldVNode.dom && oldVNode.dom) {\r\n            (_b = (_a = oldVNode.dom) === null || _a === void 0 ? void 0 : _a.parentNode) === null || _b === void 0 ? void 0 : _b.replaceChild(updatedDom, oldVNode.dom);\r\n        }\r\n        component.vnode = newVNode; // Store the new virtual node in the component.\r\n        component.componentOnUpdate(component.props, component.state); // Trigger the update lifecycle.\r\n    }\r\n    // Create a DOM node from a virtual node.\r\n    static createDom(vnode) {\r\n        if (typeof vnode === "string" || typeof vnode === "number") {\r\n            return document.createTextNode(String(vnode)); // Convert numbers to text nodes as well.\r\n        }\r\n        if (typeof vnode.tag === "function") {\r\n            // Handle functional or class-based components.\r\n            const ComponentClass = vnode.tag;\r\n            const component = new ComponentClass(vnode.props);\r\n            const componentVNode = component.render();\r\n            componentVNode.component = component;\r\n            vnode.component = component;\r\n            component.vnode = componentVNode;\r\n            const dom = CTFramework.createDom(componentVNode);\r\n            vnode.dom = dom;\r\n            component.componentOnMount();\r\n            return dom;\r\n        }\r\n        const element = document.createElement(vnode.tag); // Create a DOM element for the tag.\r\n        vnode.dom = element;\r\n        // Event delegation: Attach a click-event attribute and store the event handler.\r\n        // Check if the vnode has an onClick prop before adding the event handler\r\n        if (vnode.props && vnode.props.onClick) {\r\n            const oldEventId = element.getAttribute("click-event");\r\n            if (oldEventId && CTFramework.eventHandlers[oldEventId]) {\r\n                                delete CTFramework.eventHandlers[oldEventId]; // Remove the old handler\r\n            }\r\n            // Only add the event listener and ID if the component has a click event\r\n            element.setAttribute("click-event", guid());\r\n            CTFramework.eventHandlers[element.getAttribute("click-event")] = vnode.props.onClick;\r\n        }\r\n        // Set properties and styles.\r\n        CTFramework.updateDomProperties(element, {}, vnode.props);\r\n        // Recursively create DOM for child nodes.\r\n        vnode.children.forEach((child) => {\r\n            const childDom = CTFramework.createDom(child);\r\n            element.appendChild(childDom);\r\n        });\r\n        return element;\r\n    }\r\n    // Update the DOM by comparing the old and new virtual nodes.\r\n    static updateDom(oldVNode, newVNode) {\r\n        // Handle text nodes\r\n        if (typeof oldVNode === "string" || typeof newVNode === "string") {\r\n            const newTextContent = (typeof newVNode === "string" ? newVNode : "") || "";\r\n            if (oldVNode !== newTextContent) {\r\n                return document.createTextNode(newTextContent);\r\n            }\r\n            return typeof oldVNode === "string" ? document.createTextNode(oldVNode) : oldVNode.dom;\r\n        }\r\n        // Static node check remains\r\n        if (oldVNode.isStatic) {\r\n            newVNode.dom = oldVNode.dom;\r\n            newVNode.component = oldVNode.component;\r\n            return newVNode.dom;\r\n        }\r\n        // Replace node if tag is different\r\n        if (oldVNode.tag !== newVNode.tag) {\r\n            const newDom = CTFramework.createDom(newVNode);\r\n            if (oldVNode.dom && oldVNode.dom.parentNode) {\r\n                oldVNode.dom.parentNode.replaceChild(newDom, oldVNode.dom);\r\n            }\r\n            return newDom;\r\n        }\r\n        const dom = oldVNode.dom;\r\n        newVNode.dom = dom;\r\n        // **Ensure text content is updated**:\r\n        // If we\'re dealing with text inside an element (like <h1>)\r\n        if (newVNode.children.length === 1 && typeof newVNode.children[0] === "string") {\r\n            if (dom.textContent !== newVNode.children[0]) {\r\n                dom.textContent = newVNode.children[0]; // Update text directly\r\n            }\r\n        }\r\n        // Update properties even if children haven\'t changed\r\n        CTFramework.updateDomProperties(dom, oldVNode.props, newVNode.props);\r\n        // Handle children updates (only if they exist)\r\n        const oldChildren = oldVNode.children || [];\r\n        const newChildren = newVNode.children || [];\r\n        if (oldChildren.length === 0 && newChildren.length === 0) {\r\n            return CTFramework.createDom(newVNode);\r\n        }\r\n        const oldChildrenMap = new Map();\r\n        // Map old children by keys if any\r\n        oldChildren.forEach((child) => {\r\n            if (child && typeof child !== "string" && child.key) {\r\n                oldChildrenMap.set(child.key, child); // **Track children by key**\r\n            }\r\n        });\r\n        // **Iterate through new children**\r\n        newChildren.forEach((newChild, i) => {\r\n            if (typeof newChild === "string") {\r\n                const newTextContent = newChild || "";\r\n                const oldChild = oldChildren[i];\r\n                if (typeof oldChild === "string" && oldChild !== newTextContent) {\r\n                    // **Update text content if needed**\r\n                    dom.childNodes[i].textContent = newTextContent;\r\n                }\r\n                else if (dom.childNodes[i]) {\r\n                    dom.replaceChild(document.createTextNode(newTextContent), dom.childNodes[i]);\r\n                }\r\n                else {\r\n                    dom.appendChild(document.createTextNode(newTextContent));\r\n                }\r\n            }\r\n            else {\r\n                const key = newChild.key;\r\n                const oldChild = key ? oldChildrenMap.get(key) : oldChildren[i]; // **Look for matching old child by key or index**\r\n                if (oldChild) {\r\n                    // **Update the DOM for the matching child**\r\n                    const updatedChildDom = CTFramework.updateDom(oldChild, newChild);\r\n                    if (dom.childNodes[i] !== updatedChildDom) {\r\n                        dom.replaceChild(updatedChildDom, dom.childNodes[i]);\r\n                    }\r\n                    if (key)\r\n                        oldChildrenMap.delete(key); // **Remove key from map once updated**\r\n                }\r\n                else {\r\n                    // **If no matching old child, create a new DOM node**\r\n                    const newChildDom = CTFramework.createDom(newChild);\r\n                    dom.appendChild(newChildDom);\r\n                }\r\n            }\r\n        });\r\n        // **Remove old children that are no longer present**\r\n        oldChildrenMap.forEach((oldChild) => {\r\n            if (oldChild.dom && dom.contains(oldChild.dom)) {\r\n                dom.removeChild(oldChild.dom); // **Remove old DOM elements that are no longer in newVNode**\r\n            }\r\n        });\r\n        return dom;\r\n    }\r\n    // Update the properties and styles of a DOM element.\r\n    static updateDomProperties(dom, oldProps = {}, newProps = {}) {\r\n        var _a;\r\n        const changes = CTFramework.getPropChanges(oldProps, newProps);\r\n        // Check if click-event exists on the DOM element, otherwise create one\r\n        let eventId = (_a = dom.getAttribute("click-event")) !== null && _a !== void 0 ? _a : "";\r\n        changes.forEach(({ name, value }) => {\r\n            if (name === "style") {\r\n                CTFramework.updateStyle(dom, oldProps.style, newProps.style);\r\n            }\r\n            else if (name.startsWith("on")) {\r\n                const eventType = name.toLowerCase().substring(2);\r\n                // Remove the old event listener from CTFramework.eventHandlers using click-event\r\n                if (CTFramework.eventHandlers[eventId]) {\r\n                                        delete CTFramework.eventHandlers[eventId]; // Remove from event handlers map\r\n                }\r\n                // Add the new event listener in CTFramework.eventHandlers using click-event\r\n                if (value && typeof value === "function") {\r\n                                        CTFramework.eventHandlers[eventId] = value; // Update the event handler in the map\r\n                }\r\n            }\r\n            else if (name === "textContent") {\r\n                dom.textContent = value;\r\n            }\r\n            else if (name in dom) {\r\n                dom[name] = value;\r\n            }\r\n            else {\r\n                dom.setAttribute(name, value);\r\n            }\r\n        });\r\n    }\r\n    // Get the differences between the old and new props for efficient updates.\r\n    static getPropChanges(oldProps, newProps) {\r\n        const changes = [];\r\n        for (const name in newProps) {\r\n            if (newProps[name] !== oldProps[name]) {\r\n                changes.push({ name, value: newProps[name] });\r\n            }\r\n        }\r\n        return changes;\r\n    }\r\n    // Add the missing updateStyle function.\r\n    static updateStyle(dom, oldStyle = {}, newStyle = {}) {\r\n        // If styles are provided as a string, update the style attribute.\r\n        if (typeof oldStyle === "string" || typeof newStyle === "string") {\r\n            dom.setAttribute("style", newStyle || "");\r\n        }\r\n        else {\r\n            // Remove old styles not present in the new styles.\r\n            Object.keys(oldStyle).forEach((key) => {\r\n                if (!(key in newStyle)) {\r\n                    dom.style[key] = "";\r\n                }\r\n            });\r\n            // Apply new styles.\r\n            Object.keys(newStyle).forEach((key) => {\r\n                if (oldStyle[key] !== newStyle[key]) {\r\n                    dom.style[key] = newStyle[key];\r\n                }\r\n            });\r\n        }\r\n    }\r\n    // Helper method to handle the component mount lifecycle.\r\n    static onMount(vnode) {\r\n        if (typeof vnode === "string")\r\n            return;\r\n        if (vnode.component) {\r\n            vnode.component.componentOnMount(); // Trigger component mount lifecycle.\r\n        }\r\n        vnode.children.forEach((child) => CTFramework.onMount(child));\r\n    }\r\n    // Helper method to handle the component unmount lifecycle.\r\n    static onUnmount(vnode) {\r\n        if (typeof vnode === "string")\r\n            return;\r\n        if (vnode.component) {\r\n            vnode.component.componentOnUnmount(); // Trigger component unmount lifecycle.\r\n        }\r\n        vnode.children.forEach((child) => CTFramework.onUnmount(child));\r\n    }\r\n}\r\nCTFramework.eventHandlers = {}; // Store event handlers by their unique event ID.\r\nCTFramework.pendingUpdates = []; // Queue for pending updates to be processed.\r\nfunction guid() {\r\n    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16) | 0;\r\n        const v = c === "x" ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n}\r\n// Event delegation: A single event listener handles all click events.\r\ndocument.addEventListener("click", (event) => {\r\n    let target = event.target;\r\n    while (target && !target.hasAttribute("click-event")) {\r\n        target = target.parentElement;\r\n    }\r\n    if (target) {\r\n        const handler = CTFramework.eventHandlers[target.getAttribute("click-event")];\r\n        handler && handler(event);\r\n    }\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/CTFramework.ts\n'
      );

      /***/
    },

  /***/ "./src/Component.ts":
    /*!**************************!*\
  !*** ./src/Component.ts ***!
  \**************************/
    /***/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Component: () => (/* binding */ Component),\n/* harmony export */   memo: () => (/* binding */ memo)\n/* harmony export */ });\n/* harmony import */ var _CTFramework__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CTFramework */ "./src/CTFramework.ts");\n\r\n// Component class representing a UI component with state and lifecycle management.\r\nclass Component {\r\n    constructor(props) {\r\n        this.vnode = null;\r\n        this.props = props;\r\n        this.state = {};\r\n    }\r\n    // Set a new state and schedule a re-render if necessary.\r\n    setState(newState) {\r\n        const prevState = this.state;\r\n        this.state = Object.assign(Object.assign({}, this.state), newState);\r\n        // Schedule a re-render asynchronously.\r\n        Promise.resolve().then(() => {\r\n            if (this.vnode && this.shouldComponentUpdate(this.props, prevState)) {\r\n                // Use CTFramework\'s rerender method to update the DOM\r\n                _CTFramework__WEBPACK_IMPORTED_MODULE_0__.CTFramework.rerender(this);\r\n            }\r\n        });\r\n    }\r\n    // Method to control whether a component should re-render.\r\n    // Override this method in individual components if specific checks are needed.\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return true; // Default behavior is to always re-render.\r\n    }\r\n    // Render method must be implemented by any class extending Component.\r\n    render() {\r\n        throw new Error(`Render method must be implemented in the component ${this.constructor.name}`);\r\n    }\r\n    // Lifecycle methods, which can be overridden by components.\r\n    componentOnMount() { }\r\n    componentOnUpdate(prevProps, prevState) { }\r\n    componentOnUnmount() { }\r\n    componentOnCatch(error, info) { }\r\n}\r\n// Memoization helper function for components.\r\n// It prevents unnecessary re-renders by checking if the props have changed.\r\nfunction memo(ComponentClass) {\r\n    return class MemoizedComponent extends Component {\r\n        shouldComponentUpdate(nextProps) {\r\n            return shallowCompare(this.props, nextProps); // Use shallow comparison of props to prevent re-rendering.\r\n        }\r\n        // Forward the render method from the original component class\r\n        render() {\r\n            return new ComponentClass(this.props).render();\r\n        }\r\n    };\r\n}\r\n// A shallow comparison function to check if two objects are different.\r\nfunction shallowCompare(obj1, obj2) {\r\n    for (const key in obj1) {\r\n        if (obj1[key] !== obj2[key])\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvQ29tcG9uZW50LnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0QztBQUc1QyxtRkFBbUY7QUFDNUUsTUFBTSxTQUFTO0lBS3BCLFlBQVksS0FBUTtRQUZwQixVQUFLLEdBQWlCLElBQUksQ0FBQztRQUd6QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQU8sQ0FBQztJQUN2QixDQUFDO0lBRUQseURBQXlEO0lBQ3pELFFBQVEsQ0FBQyxRQUFvQjtRQUMzQixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzdCLElBQUksQ0FBQyxLQUFLLG1DQUFRLElBQUksQ0FBQyxLQUFLLEdBQUssUUFBUSxDQUFFLENBQUM7UUFFNUMsdUNBQXVDO1FBQ3ZDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQzFCLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsRUFBRTtnQkFDbkUsc0RBQXNEO2dCQUN0RCxxREFBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUM1QjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELDBEQUEwRDtJQUMxRCwrRUFBK0U7SUFDL0UscUJBQXFCLENBQUMsU0FBWSxFQUFFLFNBQVk7UUFDOUMsT0FBTyxJQUFJLENBQUMsQ0FBQywyQ0FBMkM7SUFDMUQsQ0FBQztJQUVELHNFQUFzRTtJQUN0RSxNQUFNO1FBQ0osTUFBTSxJQUFJLEtBQUssQ0FBQyxzREFBc0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2pHLENBQUM7SUFFRCw0REFBNEQ7SUFDNUQsZ0JBQWdCLEtBQUksQ0FBQztJQUNyQixpQkFBaUIsQ0FBQyxTQUFZLEVBQUUsU0FBWSxJQUFHLENBQUM7SUFDaEQsa0JBQWtCLEtBQUksQ0FBQztJQUN2QixnQkFBZ0IsQ0FBQyxLQUFVLEVBQUUsSUFBUyxJQUFHLENBQUM7Q0FDM0M7QUFFRCw4Q0FBOEM7QUFDOUMsNEVBQTRFO0FBQ3JFLFNBQVMsSUFBSSxDQUFPLGNBQWlEO0lBQzFFLE9BQU8sTUFBTSxpQkFBa0IsU0FBUSxTQUFlO1FBQ3BELHFCQUFxQixDQUFDLFNBQVk7WUFDaEMsT0FBTyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLDJEQUEyRDtRQUMzRyxDQUFDO1FBRUQsOERBQThEO1FBQzlELE1BQU07WUFDSixPQUFPLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNqRCxDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFFRCx1RUFBdUU7QUFDdkUsU0FBUyxjQUFjLENBQUMsSUFBUyxFQUFFLElBQVM7SUFDMUMsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUU7UUFDdEIsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQztZQUFFLE9BQU8sSUFBSSxDQUFDO0tBQzFDO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3RmcmFtZXdvcmsvLi9zcmMvQ29tcG9uZW50LnRzPzRkNmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ1RGcmFtZXdvcmsgfSBmcm9tIFwiLi9DVEZyYW1ld29ya1wiO1xyXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG4vLyBDb21wb25lbnQgY2xhc3MgcmVwcmVzZW50aW5nIGEgVUkgY29tcG9uZW50IHdpdGggc3RhdGUgYW5kIGxpZmVjeWNsZSBtYW5hZ2VtZW50LlxyXG5leHBvcnQgY2xhc3MgQ29tcG9uZW50PFAgPSB7fSwgUyA9IHt9PiB7XHJcbiAgc3RhdGU6IFM7XHJcbiAgcHJvcHM6IFA7XHJcbiAgdm5vZGU6IFZOb2RlIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQKSB7XHJcbiAgICB0aGlzLnByb3BzID0gcHJvcHM7XHJcbiAgICB0aGlzLnN0YXRlID0ge30gYXMgUztcclxuICB9XHJcblxyXG4gIC8vIFNldCBhIG5ldyBzdGF0ZSBhbmQgc2NoZWR1bGUgYSByZS1yZW5kZXIgaWYgbmVjZXNzYXJ5LlxyXG4gIHNldFN0YXRlKG5ld1N0YXRlOiBQYXJ0aWFsPFM+KSB7XHJcbiAgICBjb25zdCBwcmV2U3RhdGUgPSB0aGlzLnN0YXRlO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHsgLi4udGhpcy5zdGF0ZSwgLi4ubmV3U3RhdGUgfTtcclxuXHJcbiAgICAvLyBTY2hlZHVsZSBhIHJlLXJlbmRlciBhc3luY2hyb25vdXNseS5cclxuICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xyXG4gICAgICBpZiAodGhpcy52bm9kZSAmJiB0aGlzLnNob3VsZENvbXBvbmVudFVwZGF0ZSh0aGlzLnByb3BzLCBwcmV2U3RhdGUpKSB7XHJcbiAgICAgICAgLy8gVXNlIENURnJhbWV3b3JrJ3MgcmVyZW5kZXIgbWV0aG9kIHRvIHVwZGF0ZSB0aGUgRE9NXHJcbiAgICAgICAgQ1RGcmFtZXdvcmsucmVyZW5kZXIodGhpcyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gTWV0aG9kIHRvIGNvbnRyb2wgd2hldGhlciBhIGNvbXBvbmVudCBzaG91bGQgcmUtcmVuZGVyLlxyXG4gIC8vIE92ZXJyaWRlIHRoaXMgbWV0aG9kIGluIGluZGl2aWR1YWwgY29tcG9uZW50cyBpZiBzcGVjaWZpYyBjaGVja3MgYXJlIG5lZWRlZC5cclxuICBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzOiBQLCBuZXh0U3RhdGU6IFMpIHtcclxuICAgIHJldHVybiB0cnVlOyAvLyBEZWZhdWx0IGJlaGF2aW9yIGlzIHRvIGFsd2F5cyByZS1yZW5kZXIuXHJcbiAgfVxyXG5cclxuICAvLyBSZW5kZXIgbWV0aG9kIG11c3QgYmUgaW1wbGVtZW50ZWQgYnkgYW55IGNsYXNzIGV4dGVuZGluZyBDb21wb25lbnQuXHJcbiAgcmVuZGVyKCk6IFZOb2RlIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihgUmVuZGVyIG1ldGhvZCBtdXN0IGJlIGltcGxlbWVudGVkIGluIHRoZSBjb21wb25lbnQgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9YCk7XHJcbiAgfVxyXG5cclxuICAvLyBMaWZlY3ljbGUgbWV0aG9kcywgd2hpY2ggY2FuIGJlIG92ZXJyaWRkZW4gYnkgY29tcG9uZW50cy5cclxuICBjb21wb25lbnRPbk1vdW50KCkge31cclxuICBjb21wb25lbnRPblVwZGF0ZShwcmV2UHJvcHM6IFAsIHByZXZTdGF0ZTogUykge31cclxuICBjb21wb25lbnRPblVubW91bnQoKSB7fVxyXG4gIGNvbXBvbmVudE9uQ2F0Y2goZXJyb3I6IGFueSwgaW5mbzogYW55KSB7fVxyXG59XHJcblxyXG4vLyBNZW1vaXphdGlvbiBoZWxwZXIgZnVuY3Rpb24gZm9yIGNvbXBvbmVudHMuXHJcbi8vIEl0IHByZXZlbnRzIHVubmVjZXNzYXJ5IHJlLXJlbmRlcnMgYnkgY2hlY2tpbmcgaWYgdGhlIHByb3BzIGhhdmUgY2hhbmdlZC5cclxuZXhwb3J0IGZ1bmN0aW9uIG1lbW88UCwgUz4oQ29tcG9uZW50Q2xhc3M6IG5ldyAocHJvcHM6IFApID0+IENvbXBvbmVudDxQLCBTPik6IG5ldyAocHJvcHM6IFApID0+IENvbXBvbmVudDxQLCBTPiB7XHJcbiAgcmV0dXJuIGNsYXNzIE1lbW9pemVkQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50PFAsIFM+IHtcclxuICAgIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHM6IFApIHtcclxuICAgICAgcmV0dXJuIHNoYWxsb3dDb21wYXJlKHRoaXMucHJvcHMsIG5leHRQcm9wcyk7IC8vIFVzZSBzaGFsbG93IGNvbXBhcmlzb24gb2YgcHJvcHMgdG8gcHJldmVudCByZS1yZW5kZXJpbmcuXHJcbiAgICB9XHJcblxyXG4gICAgLy8gRm9yd2FyZCB0aGUgcmVuZGVyIG1ldGhvZCBmcm9tIHRoZSBvcmlnaW5hbCBjb21wb25lbnQgY2xhc3NcclxuICAgIHJlbmRlcigpOiBWTm9kZSB7XHJcbiAgICAgIHJldHVybiBuZXcgQ29tcG9uZW50Q2xhc3ModGhpcy5wcm9wcykucmVuZGVyKCk7XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG5cclxuLy8gQSBzaGFsbG93IGNvbXBhcmlzb24gZnVuY3Rpb24gdG8gY2hlY2sgaWYgdHdvIG9iamVjdHMgYXJlIGRpZmZlcmVudC5cclxuZnVuY3Rpb24gc2hhbGxvd0NvbXBhcmUob2JqMTogYW55LCBvYmoyOiBhbnkpOiBib29sZWFuIHtcclxuICBmb3IgKGNvbnN0IGtleSBpbiBvYmoxKSB7XHJcbiAgICBpZiAob2JqMVtrZXldICE9PSBvYmoyW2tleV0pIHJldHVybiB0cnVlO1xyXG4gIH1cclxuICByZXR1cm4gZmFsc2U7XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Component.ts\n'
      );

      /***/
    },

  /***/ "./src/index.ts":
    /*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
    /***/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Component: () => (/* reexport safe */ _Component__WEBPACK_IMPORTED_MODULE_0__.Component),\n/* harmony export */   createElement: () => (/* reexport safe */ _CTFramework__WEBPACK_IMPORTED_MODULE_1__.createElement),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   memo: () => (/* reexport safe */ _Component__WEBPACK_IMPORTED_MODULE_0__.memo)\n/* harmony export */ });\n/* harmony import */ var _Component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Component */ "./src/Component.ts");\n/* harmony import */ var _CTFramework__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CTFramework */ "./src/CTFramework.ts");\n/// <reference path="./jsx.d.ts" />\r\n\r\n\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_CTFramework__WEBPACK_IMPORTED_MODULE_1__.CTFramework);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsbUNBQW1DO0FBRVc7QUFDYTtBQUtqQjtBQUMxQyxpRUFBZSxxREFBVyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3RmcmFtZXdvcmsvLi9zcmMvaW5kZXgudHM/ZmZiNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9qc3guZC50c1wiIC8+XHJcblxyXG5pbXBvcnQgeyBDb21wb25lbnQsIG1lbW8gfSBmcm9tIFwiLi9Db21wb25lbnRcIjtcclxuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgQ1RGcmFtZXdvcmsgfSBmcm9tIFwiLi9DVEZyYW1ld29ya1wiO1xyXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG4vLyBFeHBvcnRpbmcgdHlwZXMgYW5kIGNvbXBvbmVudHNcclxuZXhwb3J0IHR5cGUgeyBWTm9kZSB9O1xyXG5leHBvcnQgeyBDb21wb25lbnQsIG1lbW8sIGNyZWF0ZUVsZW1lbnQgfTtcclxuZXhwb3J0IGRlZmF1bHQgQ1RGcmFtZXdvcms7XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.ts\n'
      );

      /***/
    },

  /******/
};
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
  /******/ // Check if module is in cache
  /******/ var cachedModule = __webpack_module_cache__[moduleId];
  /******/ if (cachedModule !== undefined) {
    /******/ return cachedModule.exports;
    /******/
  }
  /******/ // Create a new module (and put it into the cache)
  /******/ var module = (__webpack_module_cache__[moduleId] = {
    /******/ // no module.id needed
    /******/ // no module.loaded needed
    /******/ exports: {},
    /******/
  });
  /******/
  /******/ // Execute the module function
  /******/ __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
  /******/
  /******/ // Return the exports of the module
  /******/ return module.exports;
  /******/
}
/******/
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
  /******/ // define getter functions for harmony exports
  /******/ __webpack_require__.d = (exports, definition) => {
    /******/ for (var key in definition) {
      /******/ if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
        /******/ Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
        /******/
      }
      /******/
    }
    /******/
  };
  /******/
})();
/******/
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
  /******/ __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
  /******/
})();
/******/
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
  /******/ // define __esModule on exports
  /******/ __webpack_require__.r = (exports) => {
    /******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
      /******/ Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      /******/
    }
    /******/ Object.defineProperty(exports, "__esModule", { value: true });
    /******/
  };
  /******/
})();
/******/
/************************************************************************/
/******/
/******/ // startup
/******/ // Load entry module and return exports
/******/ // This entry module can't be inlined because the eval-source-map devtool is used.
/******/ var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ var __webpack_exports__Component = __webpack_exports__.Component;
/******/ var __webpack_exports__createElement = __webpack_exports__.createElement;
/******/ var __webpack_exports__default = __webpack_exports__["default"];
/******/ var __webpack_exports__memo = __webpack_exports__.memo;
/******/ export { __webpack_exports__Component as Component, __webpack_exports__createElement as createElement, __webpack_exports__default as default, __webpack_exports__memo as memo };
/******/
